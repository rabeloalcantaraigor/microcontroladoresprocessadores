1.Defina a função void Atraso(volatile unsigned int x); que fornece um atraso de x milissegundos. Utilize o Timer_A para a contagem de tempo, e assuma que o SMCLK já foi configurado para funcionar a 1 MHz. Esta função poderá ser utilizada diretamente nas outras questões desta prova.
Resp:

void Atraso(volatile unsigned int x)
{
    TACCR0= 1000-1;
    TACTL |= TACLR;
    TACTL = TASSEL_2 + ID_3 + MC_1;
    while (x>0)
    {x--;
    while((TACTL & TAIFG)==0);
    {TACTL &=~TAIFG;}
}
}
int main (void){
    WDTCTL = WDTPW + WDTHOLD;

    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    return 0;
}

2.Pisque os LEDs da Launchpad numa frequência de 100 Hz.
Resp:

#include <msp430g2553.h>

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;
	int x;
	BCSCTL1 = CALBC1_1MHZ;		
	DCOCTL = CALDCO_1MHZ;		
	P1OUT = 0;
	P1DIR |= BIT0 + BIT6;
	TA0CCR0 = 1;
	TA0CTL = TASSEL_2 + ID_3 + MC_3;
        
        x = 10; // 50 milisegundos
	while(1)
	{       
          Atraso(x);
	  P1OUT ^= BIT0 + BIT6;
	}
	return 0;
}

Pisque os LEDs da Launchpad numa frequência de 20 Hz.
Resp:

#include <msp430g2553.h>

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;
	int x;
	BCSCTL1 = CALBC1_1MHZ;		
	DCOCTL = CALDCO_1MHZ;		
	P1OUT = 0;
	P1DIR |= BIT0 + BIT6;
	TA0CCR0 = 1;
	TA0CTL = TASSEL_2 + ID_3 + MC_3;
        
        x = 50; // 50 milisegundos
	while(1)
	{       
          Atraso(x);
	  P1OUT ^= BIT0 + BIT6;
	}
	return 0;
}

3.Pisque os LEDs da Launchpad numa frequência de 1 Hz.
Resp:

#include <msp430g2553.h>

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;
	int x;
	BCSCTL1 = CALBC1_1MHZ;		
	DCOCTL = CALDCO_1MHZ;		
	P1OUT = 0;
	P1DIR |= BIT0 + BIT6;
	TA0CCR0 = 1;
	TA0CTL = TASSEL_2 + ID_3 + MC_3;
        
        x = 1000; // 50 milisegundos
	while(1)
	{       
          Atraso(x);
	  P1OUT ^= BIT0 + BIT6;
	}
	return 0;
}

4.Pisque os LEDs da Launchpad numa frequência de 0,5 Hz.
Resp:

#include <msp430g2553.h>

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;
	int x;
	BCSCTL1 = CALBC1_1MHZ;		
	DCOCTL = CALDCO_1MHZ;		
	P1OUT = 0;
	P1DIR |= BIT0 + BIT6;
	TA0CCR0 = 1;
	TA0CTL = TASSEL_2 + ID_3 + MC_3;
        
        x = 2000; // 50 milisegundos
	while(1)
	{       
          Atraso(x);
	  P1OUT ^= BIT0 + BIT6;
	}
	return 0;
}

5.Repita as questões 2 a 5 usando a interrupção do Timer A para acender ou apagar os LEDs.
Resp:

#include "msp430g2231.h"  
void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;       
  CCTL0 = CCIE;                            
  TACTL = TASSEL_2 + MC_1 + ID_3;          
  CCR0 =  1;                       
  P1OUT &= 0x00;               
  P1DIR &= 0x00;               
  P1DIR |= BIT0 + BIT6;            
  _BIS_SR(CPUOFF + GIE);           
  while(1)                                                                                
  {}
} 
#pragma vector=TIMERA0_VECTOR 
__interrupt void Timer_A (void) 
{   
   long int i;
   long int x;
   x = 10;
   x = 65*x;
   for(i=0;i<x;i++);
   P1OUT ^= BIT0;                                                                                 
}
_____________________________________________________________
#include "msp430g2231.h"  
void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;       
  CCTL0 = CCIE;                            
  TACTL = TASSEL_2 + MC_1 + ID_3;          
  CCR0 =  1;                       
  P1OUT &= 0x00;               
  P1DIR &= 0x00;               
  P1DIR |= BIT0 + BIT6;            
  _BIS_SR(CPUOFF + GIE);           
  while(1)                                                                                
  {}
} 
#pragma vector=TIMERA0_VECTOR 
__interrupt void Timer_A (void) 
{   
   long int i;
   long int x;
   x = 50;
   x = 65*x;
   for(i=0;i<x;i++);
   P1OUT ^= BIT0;                                                                                 
}
_________________________________________________________________________
#include "msp430g2231.h"  
void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;       
  CCTL0 = CCIE;                            
  TACTL = TASSEL_2 + MC_1 + ID_3;          
  CCR0 =  1;                       
  P1OUT &= 0x00;               
  P1DIR &= 0x00;               
  P1DIR |= BIT0 + BIT6;            
  _BIS_SR(CPUOFF + GIE);           
  while(1)                                                                                
  {}
} 
#pragma vector=TIMERA0_VECTOR 
__interrupt void Timer_A (void) 
{   
   long int i;
   long int x;
   x = 1000;
   x = 65*x;
   for(i=0;i<x;i++);
   P1OUT ^= BIT0;                                                                                 
}
__________________________________________________________________________
#include "msp430g2231.h"  
void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;       
  CCTL0 = CCIE;                            
  TACTL = TASSEL_2 + MC_1 + ID_3;          
  CCR0 =  1;                       
  P1OUT &= 0x00;               
  P1DIR &= 0x00;               
  P1DIR |= BIT0 + BIT6;            
  _BIS_SR(CPUOFF + GIE);           
  while(1)                                                                                
  {}
} 
#pragma vector=TIMERA0_VECTOR 
__interrupt void Timer_A (void) 
{   
   long int i;
   long int x;
   x = 2000;
   x = 65*x;
   for(i=0;i<x;i++);
   P1OUT ^= BIT0;                                                                                 
}

6.Defina a função void paralelo_para_serial(void); que lê o byte de entrada via porta P1 e transmite os bits serialmente via pino P2.0. Comece com um bit em nivel alto, depois os bits na ordem P1.0 - P1.1 - … - P1.7 e termine com um bit em nível baixo. Considere um período de 1 ms entre os bits.

7.Faça o programa completo que lê um byte de entrada serialmente via pino P2.0 e transmite este byte via porta P1. O sinal serial começa com um bit em nivel alto, depois os bits na ordem 0-7 e termina com um bit em nível baixo. Os pinos P1.0-P1.7 deverão corresponder aos bits 0-7, respectivamente. Considere um período de 1 ms entre os bits.

8.Defina a função void ConfigPWM(volatile unsigned int freqs, volatile unsigned char ciclo_de_trabalho); para configurar e ligar o Timer_A em modo de comparação. Considere que o pino P1.6 já foi anteriormente configurado como saída do canal 1 de comparação do Timer_A, que somente os valores {100, 200, 300, …, 1000} Hz são válidos para a frequência, que somente os valores {0, 25, 50, 75, 100} % são válidos para o ciclo de trabalho, e que o sinal de clock SMCLK do MSP430 está operando a 1 MHz.
